Survey Area
	Given a polygonal survey area for the drone to traverse and a set obstacles with known positions and radius (obstacles are circles), generate a traversal path of the survey area without running into obstacles).

Algorithm:
	- Identify BEGIN, END, IN, OUT, and MIDDLE events and sort them
		according to their x-coordinates.
	- Instantiate polygonal obstacles and survey area
	- iterate through events (event line scanning from left to right):
		- BEGIN event: create a new cell
		- END event: end all cells that is still opened
		- IN event: 
			terminate the cell in contact with the event line
			(old cell) and start two or more new cells that 
			the old cell is split into.
			
		- OUT event:
			terminate the cells in contact with the event line
			(old cells) and start a new cell that the old cells
			are combined into.

		- MIDDLE event:
			update the cell that is in contact with the event line.
			Enqueue the new edge as the floor or roof edge of the
			cell, which has the edge prior to the event as floor 
			or root.

Classes:
	- Event:
		Stores event location and the edges adjacent to the event

		inEvent : Event
		outEvent: Event				
		beginEvent : inEvent
		endEvent: outEvent

		middleEvent : Event
		Middle event can be further classified to CEILING and FLOOR events


		* END event can be impl. as a special type of IN event. (and BEGIN as OUT) 
		* Events could be edges or points

	- Polygon : polygon_2d
		Interfaces:
		1. Given an event location, check if the polygon has an intersection
		with the scan line at the event location. If so, return the edges
		of the polygon that intersect with the scan line.

		Data:
			- Edges : segment_2d
				Each edge inherits from 
			- Vertices : point_2d
				Each vertex contains an event

	- surveyArea : Polygon:
		generate events (MIDDLE, BEGIN, END) for all vertices.
			
		Update B. cells:
		  1. Determine which B. cells are affected
		    B. cells adjacent to event lines are affected. B. cells that
		    are affected are terminated.
		  2. Updating cells
		    IN events: order events' prevEdges and nextEdges. Start new B. cells
			with pairs of edges.
		    MIDDLE events:
			For obstacles:
	 		  FLOOR events:
			    update the affected B. cell by appending the event's prevEdge to
			    the affected B. cell's floorSegPtrs.
			  CEIL events:
			    update the affected B. cell by appending the event's nextEedge to
			    the affected B. cell's ceilSegPtrs.
			For surveyArea:
			  FLOOR events:
			    update .... appending the event's nextEdge to .... B. cell's floorSegPtrs
			  CEIL events:
			    update ... appending the event's prevEdge to ... B. cell's ceilSegPtrs
		    OUT events: take the widest possible ceiling/floor pair of all the
				affected B. cells.
		
		  Implementation:
		  At (x = xCoord):
		  a. B. cells that should be closed off have their last floor and ceiling edges
			within the eventLine = scanLine - obstacles at xCoord (subtract)).
			
			Proof by Contradiction:
			If B.cell that should be closed off is not within scanLine - obstacles, then
			there must be an obstacle that blocks the eventLine from spanning to the B.cell's
			full width.
		  b. Find "opening lines" = eventLine - eventObjs at xCoord (subtract()). 
			"opening lines" are the new starting points of new cells.

		  c. new B. cells that should be opened start with "openings", which can be matched
			with the sorted floor and ceiling edges as described in (IN events above) 
		Data:
		- BoustrophedonCells

		Interface:
		- update():
			Given events, terminate and start B. cells as stated above.
			

	- obstacle : Polygon:
		generate events (MIDDLE, IN, OUT) for all vertices.

Primitive Operations:
	Path generation for four-sided convex polygon:
	- Given a pair of begin and end x-coordinates and a series of
	floor and roof edges (gauranteed to be convex for now), generate
	a path that traverses through the polygon completely.
	
	- Path generation is dependent on the height of the drone

Implementation:
	TODO:
		- Limit scan line using "union", unioning with survey area 
		(outer ring) and subtracting obstacles (inner rings).

		- represent polygons in terms of vertices (point_2ds) and
		edges (segment_2ds).

		- Check for intersecting edges of polygons and obstacles with
		the scan line.

		- Generate events, which contain roof and floor edges to construct
		new cells.

		- Avoid duplicates in cell creation (e.g. multiple IN events that
		have the same x-coordinates.)

	Things to think about:
		- Should SurveyArea and Obstacle classes be subclasses of polygon_2d?

